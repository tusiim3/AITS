# Generated by Django 5.1.5 on 2025-04-15 17:04

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254)),
                ('number_type', models.CharField(choices=[('student_number', 'Student Number'), ('lecturer_number', 'Lecturer Number'), ('registrar_number', 'Registrar Number')], max_length=20)),
                ('student_number', models.CharField(max_length=10, null=True, unique=True)),
                ('lecturer_number', models.CharField(max_length=10, null=True, unique=True)),
                ('registrar_number', models.CharField(max_length=10, null=True, unique=True)),
                ('role', models.CharField(blank=True, choices=[('student', 'Student'), ('lecturer', 'Lecturer'), ('registrar', 'Registrar')], max_length=20, null=True)),
                ('year_of_study', models.IntegerField(blank=True, choices=[(1, '1st Year'), (2, '2nd Year'), (3, '3rd Year'), (4, '4th Year'), (5, '5th Year')], null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_name', models.CharField(max_length=50, unique=True)),
                ('course_code', models.CharField(max_length=10, unique=True)),
                ('lecturer', models.ForeignKey(limit_choices_to={'role': 'lecturer'}, on_delete=django.db.models.deletion.PROTECT, related_name='lecturer_courses', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Issues',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('complaint', models.CharField(choices=[('correction', 'Correction'), ('missing marks', 'Missing marks'), ('appeal', 'Appeal')], max_length=40)),
                ('complaint_type', models.CharField(choices=[('test', 'Test'), ('course work', 'Course work'), ('final exam', 'Final exam')], max_length=40, null=True)),
                ('custom_complaint', models.TextField(null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('resolved', 'Resolved'), ('in progress', 'In progress')], default='pending', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('academic_registrar', models.ForeignKey(limit_choices_to={'role': 'registrar'}, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='registrar_issues', to=settings.AUTH_USER_MODEL)),
                ('course', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='course_issues', to='my_app.course')),
                ('lecturer', models.ForeignKey(limit_choices_to={'role': 'lecturer'}, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='lecturer_issues', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(limit_choices_to={'role': 'student'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='student_issues', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
